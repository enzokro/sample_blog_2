<?xml version="1.0" encoding="UTF-8"?>
<rss  xmlns:atom="http://www.w3.org/2005/Atom" 
      xmlns:media="http://search.yahoo.com/mrss/" 
      xmlns:content="http://purl.org/rss/1.0/modules/content/" 
      xmlns:dc="http://purl.org/dc/elements/1.1/" 
      version="2.0">
<channel>
<title>sample_blog_2</title>
<link>https://enzokro.github.io/sample_blog_2/blog/index.html</link>
<atom:link href="https://enzokro.github.io/sample_blog_2/blog/index.xml" rel="self" type="application/rss+xml"/>
<description>Creating a sample blog with nbdev</description>
<generator>quarto-1.3.450</generator>
<lastBuildDate>Tue, 27 Sep 2022 04:00:00 GMT</lastBuildDate>
<item>
  <title>nbdev for Blogging and Building Python Libraries</title>
  <dc:creator>enzokro </dc:creator>
  <link>https://enzokro.github.io/sample_blog_2/blog/posts/2023-09-27-Blog-Intro/index.html</link>
  <description><![CDATA[ 



<section id="goals" class="level2">
<h2 class="anchored" data-anchor-id="goals">Goals:</h2>
<ul>
<li>Create a blog and publish our first post.<br>
</li>
<li>Build a custom, dynamic python library for the Sentiment Analysis pipeline in <code>01_first_runs.ipynb</code>.</li>
</ul>
</section>
<section id="intro" class="level2">
<h2 class="anchored" data-anchor-id="intro">Intro:</h2>
<p>This Notebook takes a closer look at the <code>nbdev</code> library. <code>nbdev</code> is a powerful tool built around two key ideas:<br>
- <a href="">Literate Programming</a>. - <a href="">Exploratory Programming</a>.</p>
<p>The next sections give an overview of these topics, and why their combination is useful for us.</p>
<section id="literate-programming" class="level3">
<h3 class="anchored" data-anchor-id="literate-programming">Literate Programming</h3>
<p>In Literate Programming, descriptions (documentation) are woven directly into a project’s source code. This is opposite from most codebases where documentation lives in a separate set of files. It also goes beyond tools like <a href="https://www.sphinx-doc.org/en/master/">sphinx</a> that instead parse comments and docstrings into documentation.</p>
<p>Code, tests, and documentation are all first-class citizens in Literate Programming. In <code>nbdev</code> a Notebook is the single, unified source for all three things. Instead of having to independently manage code, docs, and tests, everything happens in the Notebook. If the Notebook runs then you know your code will run. The tight integration between what you’re doing (code), describing what you’re doing (documentation), and making sure it’s correct (tests) is a great approach for both research and thinking in general.</p>
</section>
<section id="exploratory-programming" class="level3">
<h3 class="anchored" data-anchor-id="exploratory-programming">Exploratory Programming</h3>
<p>Exploratory Programming is an open-ended approach for new problems and unknown domains. It’s very helpful at the start of a project before its scope or requirements are fully flushed out.</p>
<p>The interactive and dynamic nature of Notebooks is ideal for Exploratory Programming. It makes the barrier to try new things extremely low. And it’s fun! Jupyter also has many extra tools to inspect code and debug its outputs.</p>
</section>
<section id="combining-literate-and-exploratory-programming" class="level3">
<h3 class="anchored" data-anchor-id="combining-literate-and-exploratory-programming">Combining Literate and Exploratory Programming</h3>
<p><code>nbdev</code>’s main workflow combines these two ideas. It’s a great combo for trying things out, figuring out what they do, and how they work. We can poke around and explore codebases in a much more interactive way than usual. Iterations are fast and cheap so it’s easy to follow any hit of curiosity. And if anything breaks, we can always restart the Notebook and try again!</p>
<p>We can also mix and match these ideas as needed. For example at the start of a project, while finding our footing, we might lean Exploratory. Then as the idea matures, we could lean Literate to refine and crystallize our approach.</p>
<p>Now for our first goal: creating and publishing a blog post.</p>
</section>
</section>
<section id="turning-notebooks-into-blog-posts" class="level2">
<h2 class="anchored" data-anchor-id="turning-notebooks-into-blog-posts">Turning Notebooks into Blog Posts</h2>
<p>First, a high-level summary of the steps to create the blog.</p>
<section id="high-level-steps" class="level3">
<h3 class="anchored" data-anchor-id="high-level-steps">High-Level Steps:</h3>
<ol type="1">
<li>Create a new nbdev project.<br>
</li>
<li>Set up the minimum requirements for an nbdev blog.<br>
</li>
<li>Publish the blog to Github pages.</li>
</ol>
<blockquote class="blockquote">
<p>NOTE: This section is based on these two references: - <a href="https://nbdev.fast.ai/tutorials/tutorial.html#installation">Official nbdev tutorial.</a> - <a href="https://nbdev.fast.ai/tutorials/blogging.html">Blogging with nbdev.</a></p>
</blockquote>
<p><code>nbdev</code> leverages an amazing tool called <a href="https://quarto.org/">Quarto</a> for blogging. Quarto is a publishing framework tailored to scientific and technical articles and posts. In a way it’s a blogging platform for Literate Programming, where a series of code cells tell a story and take the reader on a journey.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://enzokro.github.io/sample_blog_2/blog/posts/2023-09-27-Blog-Intro/quarto.png" class="img-fluid figure-img"></p>
<figcaption class="figure-caption">Alt text</figcaption>
</figure>
</div>
</section>
<section id="creating-a-new-nbdev-project" class="level3">
<h3 class="anchored" data-anchor-id="creating-a-new-nbdev-project">Creating a new <code>nbdev</code> project</h3>
<p><code>nbdev</code> works on top of a Git repo, so the step is creating an empty git repository. Here is a handy <a href="https://github.com/new">Github link</a> that takes you straight to the page for creating new repos.</p>
<blockquote class="blockquote">
<p>Note: We need a completely empty repo, so don’t include a <code>.gitignore</code> or <code>README.md</code>.</p>
</blockquote>
<p>In this example the empty repo is called <code>sample_blog</code>, but feel free to call it anything you’d like. We’re not married to this name either, we can always create new repos with different, better names.</p>
<p>Next, clone this repo to your computer. Make sure to change the github link below to point to your repo instead.</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb1-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># clone the repo to your computer</span></span>
<span id="cb1-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">git</span> clone https://github.com/enzokro/sample_blog.git <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># &lt;-- ! link with your repo here</span></span></code></pre></div>
<p>Now we can move into this empty repo and let <code>nbdev</code> work its initialization magic. Run the <code>nbdev_new</code> command to get started. It will prompt you for some general info like as a short description about your project.</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb2-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># move into the new repo and initialize the nbdev project</span></span>
<span id="cb2-2"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">cd</span> sample_blog/</span>
<span id="cb2-3"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">nbdev_new</span></span></code></pre></div>
<p>All of the options and configs for your project are found in the <code>settings.ini</code> file. <code>nbdev</code> looks in this file for any info it needs for its commands.</p>
<p>When <code>nbdev_new</code> finishes running, you will have a new <code>nbdev</code> project! Try running a <code>git status</code> command to see everything that was added.</p>
<p>We can now commit and push these changes to Github.</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb3-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># add, commit, and push the files created by nbdev</span></span>
<span id="cb3-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">git</span> add .</span>
<span id="cb3-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">git</span> commit <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-m</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Initial nbdev project creation'</span></span>
<span id="cb3-4"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">git</span> push</span></code></pre></div>
<p>As we mentioned earlier, <code>nbdev</code> leverages Quarto for publishing Notebooks. The next steps are turning this nbdev project into a proper Quarto blog.</p>
</section>
<section id="adding-quarto-to-the-mix" class="level3">
<h3 class="anchored" data-anchor-id="adding-quarto-to-the-mix">Adding Quarto to the Mix</h3>
<p>Start by activating the virtual environment:</p>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb4-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># acivate the environment</span></span>
<span id="cb4-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">mamba</span> activate llm_base</span></code></pre></div>
<p><code>nbdev</code> includes a way to install Quarto using the <code>nbdev_install_quarto</code> command. Go ahead and run it, but note that it will ask you for administrator privileges.</p>
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb5-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># install quarto</span></span>
<span id="cb5-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">nbdev_install_quarto</span></span></code></pre></div>
<p>You may need to refresh the terminal session before it can find the <code>quarto</code> commands. To be safe, open up a new terminal and re-activate the environment. Then the command below will check if Quarto was installed successfully.</p>
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb6-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># shows us where quarto is installed</span></span>
<span id="cb6-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">which</span> quarto </span></code></pre></div>
<p>Note that the <code>nbs/</code> folder usually holds the Notebooks that become a project’s documentation, tests, and source code. To make sure Quarto can publish an <code>nbdev</code> blog we have to add some files and change this directory structure a bit.</p>
<p>First let’s take a look at what the new blog-ready <code>nbs/</code> folder will look like.</p>
<p><strong>Minimal Quarto blog folder structure</strong>:</p>
<pre><code>sample_blog
└───nbs/
│   │   _quarto.yml
│   │   index.ipynb
│   └───blog/
│       │   index.qmd
│       └───posts/
│           └───2023-09-24-first-post/     
│               │   index.ipynb</code></pre>
<p>You’ll notice that <code>nbdev</code> already added the <code>_quarto.yml</code> file. The main change we are making is adding a <code>blog/</code> folder to the <code>nbs/</code> directory. This directory has an <code>index.qmd</code> file that tells Quarto about our blog. Here’s an example <code>index.qmd</code> file that describes our blog and how its posts should be listed:</p>
<div class="sourceCode" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode yaml code-with-copy"><code class="sourceCode yaml"><span id="cb8-1"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">---</span></span>
<span id="cb8-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">title</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> Example Blog</span></span>
<span id="cb8-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">subtitle</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> Publishing with Quarto and nbdev</span></span>
<span id="cb8-4"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">listing</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb8-5"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sort</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"date desc"</span></span>
<span id="cb8-6"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">contents</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"posts"</span></span>
<span id="cb8-7"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sort-ui</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">false</span></span>
<span id="cb8-8"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">filter-ui</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">false</span></span>
<span id="cb8-9"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">categories</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">true</span></span>
<span id="cb8-10"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">feed</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">true</span></span>
<span id="cb8-11"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">page-layout</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> full</span></span>
<span id="cb8-12"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">---</span></span></code></pre></div>
<p>Each post gets its own folder and a matching <code>index.ipynb</code> Notebook with the actual post’s content. Eventually we can add photos, videos, and any other media that enhances the post.</p>
<p>Next, we will leverage <a href="https://pages.github.com/">Github Pages</a> to build and host our site for free. The screenshot below shows the settings we need on the Github site for our repo to be published as a blog. Concretely, we need to <code>Deploy from a branch</code> and pick the <code>gh-pages</code> branch.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://enzokro.github.io/sample_blog_2/blog/posts/2023-09-27-Blog-Intro/github_pages.png" class="img-fluid figure-img"></p>
<figcaption class="figure-caption">image.png</figcaption>
</figure>
</div>
<p>And that’s all there is to it! We can now publish our first post. <a href="">Click here</a> for a live link to this Notebook turned into a blog post.</p>
<p>Now we’ve seen how <code>nbdev</code> lets us quickly create and setup a blog. Next we’ll look at another one of its great capabilities: building a fully fledged python library.</p>
</section>
</section>
<section id="creating-python-libraries-with-nbdev" class="level2">
<h2 class="anchored" data-anchor-id="creating-python-libraries-with-nbdev">Creating python libraries with <code>nbdev</code></h2>
<p><code>nbdev</code> has a set of helper commands that convert Notebooks into complete python libraries.</p>
<p>These helper commands are called <code>directives</code> and usually go at the start of a code cell. They start with the special <code>#|</code> string which is similar to the shebang <code>#!</code> you may have seen in other scripts. These directive tell <code>nbdev</code> how to parse the code cell and what to do with it.</p>
<p>For example, the <code>default_exp</code> directive tells <code>nbdev</code> what to name an output python file. We use it below to name this specific python file as <code>lesson_2/simple_pipeline.py</code>:</p>
<p>After we’ve named our soon-to-be python file, the <code>#| export</code> directive will parse and extract any python code cell we attach to it.</p>
<p>::: {.cell 0=‘e’ 1=‘x’ 2=‘p’ 3=‘o’ 4=‘r’ 5=‘t’ execution_count=2}</p>
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># importing the pieces for the pipeline</span></span>
<span id="cb9-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> transformers <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> AutoConfig</span>
<span id="cb9-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> transformers <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> AutoTokenizer</span>
<span id="cb9-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> transformers <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> AutoModelForSequenceClassification</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>/Users/cck/mambaforge/envs/llm_base/lib/python3.11/site-packages/tqdm/auto.py:21: TqdmWarning: IProgress not found. Please update jupyter and ipywidgets. See https://ipywidgets.readthedocs.io/en/stable/user_install.html
  from .autonotebook import tqdm as notebook_tqdm</code></pre>
</div>
<p>:::</p>
<blockquote class="blockquote">
<p>A small annoyance: <code>import</code> statements have to be in their own code cell. We can’t pair them with function calls like <code>print()</code>, for example.</p>
</blockquote>
<p>Next, we refactor the code from the previous notebook (<code>01_first_run.ipynb</code>) into a simple class.</p>
<p>::: {.cell 0=‘e’ 1=‘x’ 2=‘p’ 3=‘o’ 4=‘r’ 5=‘t’ execution_count=3}</p>
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> SentimentPipeline:</span>
<span id="cb11-2">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, model_name):</span>
<span id="cb11-3">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb11-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        Sentiment Analysis pipeline.</span></span>
<span id="cb11-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        """</span></span>
<span id="cb11-6">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.model_name <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> model_name</span>
<span id="cb11-7">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.config <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> AutoConfig.from_pretrained(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.model_name)</span>
<span id="cb11-8">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.tokenizer <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> AutoTokenizer.from_pretrained(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.model_name)</span>
<span id="cb11-9">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.model <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> AutoModelForSequenceClassification.from_pretrained(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.model_name)</span>
<span id="cb11-10"></span>
<span id="cb11-11"></span>
<span id="cb11-12">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> preprocess(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, text: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>):</span>
<span id="cb11-13">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb11-14"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        Sends `text` through the LLM's tokenizer.  </span></span>
<span id="cb11-15"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        The tokenizer turns words and characters into special inputs for the LLM.</span></span>
<span id="cb11-16"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        """</span></span>
<span id="cb11-17">        tokenized_inputs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.tokenizer(text, return_tensors<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'pt'</span>)</span>
<span id="cb11-18">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> tokenized_inputs</span>
<span id="cb11-19">    </span>
<span id="cb11-20"></span>
<span id="cb11-21">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> forward(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, text: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>):</span>
<span id="cb11-22">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb11-23"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        First we preprocess the `text` into tokens.</span></span>
<span id="cb11-24"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        Then we send the `token_inputs` to the model.</span></span>
<span id="cb11-25"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        """</span></span>
<span id="cb11-26">        token_inputs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.preprocess(text)</span>
<span id="cb11-27">        outputs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.model(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span>token_inputs)</span>
<span id="cb11-28">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> outputs</span>
<span id="cb11-29">    </span>
<span id="cb11-30"></span>
<span id="cb11-31">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> process_outputs(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, outs):</span>
<span id="cb11-32">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb11-33"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        Here we mimic the post-processing that HuggingFace automatically does in its `pipeline`.  </span></span>
<span id="cb11-34"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        """</span></span>
<span id="cb11-35">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># grab the raw scores from the model for Positive and Negative labels</span></span>
<span id="cb11-36">        logits <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> outs.logits</span>
<span id="cb11-37"></span>
<span id="cb11-38">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># find the strongest label score, aka the model's decision</span></span>
<span id="cb11-39">        pred_idx <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> logits.argmax(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>).item()</span>
<span id="cb11-40"></span>
<span id="cb11-41">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># use the `config` object to find the actual class label</span></span>
<span id="cb11-42">        pred_label <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.config.id2label[pred_idx]  </span>
<span id="cb11-43"></span>
<span id="cb11-44">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># calculate the human-readable probability score for this class</span></span>
<span id="cb11-45">        pred_score <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> logits.softmax(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)[:, pred_idx].item()</span>
<span id="cb11-46"></span>
<span id="cb11-47">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># return the predicted label and its score</span></span>
<span id="cb11-48">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> {</span>
<span id="cb11-49">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'label'</span>: pred_label,</span>
<span id="cb11-50">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'score'</span>: pred_score, </span>
<span id="cb11-51">        }</span>
<span id="cb11-52">    </span>
<span id="cb11-53"></span>
<span id="cb11-54">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__call__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, text: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>):</span>
<span id="cb11-55">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb11-56"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        Overriding the call method to easily and intuitively call the pipeline.</span></span>
<span id="cb11-57"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        """</span></span>
<span id="cb11-58">        model_outs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.forward(text)</span>
<span id="cb11-59">        preds <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.process_outputs(model_outs)</span>
<span id="cb11-60">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> preds</span>
<span id="cb11-61"></span>
<span id="cb11-62">    </span>
<span id="cb11-63">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__repr__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb11-64">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb11-65"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        Cleaner representation of the pipeline.</span></span>
<span id="cb11-66"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        """</span></span>
<span id="cb11-67">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"SentimentAnalysis_</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>model_name<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span></span></code></pre></div>
<p>:::</p>
<p>Let’s now make sure that <code>SentimentPipeline</code> actually works, since live tests are one of the main benefits of Notebook coding! Note that since we don’t put an <code>|# export</code> directive in the cell below, it won’t be part of the exported python file either.</p>
<div class="cell" data-execution_count="4">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb12-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># testing the pipeline</span></span>
<span id="cb12-2"></span>
<span id="cb12-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># loading the default model</span></span>
<span id="cb12-4">model_name <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'distilbert-base-uncased-finetuned-sst-2-english'</span></span>
<span id="cb12-5">classifier <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> SentimentPipeline(model_name) </span>
<span id="cb12-6"></span>
<span id="cb12-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># make sure that the official HuggingFace example works as expected</span></span>
<span id="cb12-8">results <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> classifier(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"We are very happy to show you the 🤗 Transformers library."</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> results</span>
<span id="cb12-9"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">assert</span> results[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'label'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'POSITIVE'</span></span></code></pre></div>
</div>
<p>You can think of the cell above as a unit test for the <code>SentimentAnalysis</code> pipeline. <code>nbdev</code> runs this notebook when it compiles the library, and if the tests fail then the build fails. This is a great, built-in way of making sure that the library works as expected.</p>
<section id="exporting-the-library" class="level3">
<h3 class="anchored" data-anchor-id="exporting-the-library">Exporting the library</h3>
<p>We can now export the library using the <code>nbdev_build_lib</code> command. This will create a file inside of the top-level library folder <code>Fractal_LLM_Course</code>. Per the <code>default_exp</code> directive, the file will called <code>lesson_2/simple_pipeline.py</code>.</p>
<blockquote class="blockquote">
<p>Note: we can add nested library directories with the typical python dot (<code>.</code>) syntax. For example, if we’d instead used the directive <code>|# default_exp simple_pipeline</code>, then the file would live at the top-level library folder: <code>Fractal_LLM_Course/simple_pipeline.py</code>. Adding the <code>lesson_2.</code> created the <code>lesson_2/</code> folder for us.</p>
</blockquote>
<p>The following set of commands will:<br>
- Export the Notebooks into a library.<br>
- Install the library as an editable install. - Import the newly installed library in a python shell.</p>
<p>Make sure to run them from the top-level directory of the repo.</p>
<div class="sourceCode" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb13-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># export Notebooks into a library</span></span>
<span id="cb13-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">nbdev_export_lib</span>  </span>
<span id="cb13-3"></span>
<span id="cb13-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># install the library as an editable install</span></span>
<span id="cb13-5"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">pip</span> install <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-e</span> . </span></code></pre></div>
<p>Now open up a python shell to import and use the library.</p>
<div class="sourceCode" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb14-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># import the newly installed library </span></span>
<span id="cb14-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> Fractal_LLM_Course.lesson_2.simple_pipeline <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> SentimentPipeline</span>
<span id="cb14-3"></span>
<span id="cb14-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># use our custom SentimentAnalysis pipeline!</span></span>
<span id="cb14-5">model_name <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'distilbert-base-uncased-finetuned-sst-2-english'</span></span>
<span id="cb14-6">classifier <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> SentimentPipeline(model_name) </span></code></pre></div>
<p>Congrats! We’ve now built and installed a full, working python library. This is just the start, <code>nbdev</code> has many other advanced tools you can <a href="https://nbdev.fast.ai/tutorials/tutorial.html#advanced-functionality">read about here</a>.</p>
</section>
</section>
<section id="conclusion" class="level1">
<h1>Conclusion</h1>
<p>This Notebook covered two key features of <code>nbdev</code>:<br>
- Creating a blog. - Building a python library.</p>
<p>Both of these features are great for research and development. We can quickly try new ideas and easily share them with others.</p>


</section>

 ]]></description>
  <category>fractal</category>
  <category>python</category>
  <category>nbdev</category>
  <guid>https://enzokro.github.io/sample_blog_2/blog/posts/2023-09-27-Blog-Intro/index.html</guid>
  <pubDate>Tue, 27 Sep 2022 04:00:00 GMT</pubDate>
  <media:content url="https://enzokro.github.io/sample_blog_2/blog/posts/2023-09-27-Blog-Intro/nbdev_pic.png" medium="image" type="image/png" height="66" width="144"/>
</item>
</channel>
</rss>
